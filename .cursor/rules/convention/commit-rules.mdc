---
alwaysApply: true
---

## 커밋 타입

| 타입         | 설명                              | 예시                                        |
| ------------ | --------------------------------- | ------------------------------------------- |
| **feat**     | 새로운 기능 추가                  | `feat: 다크 모드 지원 추가`                 |
| **fix**      | 버그 수정                         | `fix: 회원가입 시 에러 발생 문제 수정`      |
| **docs**     | 문서 수정                         | `docs: README에 사용 방법 추가`             |
| **style**    | 코드 스타일 변경 (기능 영향 없음) | `style: 들여쓰기 수정 및 세미콜론 추가`     |
| **refactor** | 코드 리팩토링 (기능 변경 없음)    | `refactor: 불필요한 변수 제거`              |
| **test**     | 테스트 추가/수정                  | `test: 유닛 테스트 케이스 추가`             |
| **chore**    | 빌드, 패키지, 설정 등 기타 변경   | `chore: eslint 설정 업데이트`               |
| **perf**     | 성능 개선                         | `perf: 이미지 로딩 속도 향상`               |
| **ci**       | CI/CD 관련 수정                   | `ci: GitHub Actions 워크플로 수정`          |
| **revert**   | 이전 커밋 되돌리기                | `revert: "feat: 로그인 기능 추가" 되돌리기` |

---

## 작성 규칙

1. 커밋 메시지는 다음 형식을 따르세요:  
   `타입: 변경 요약`
2. 제목은 **명령형 어조로**, **마침표 없이** 작성합니다.  
   예: “추가함 ❌” → “추가 ✅”
3. **한 커밋에는 하나의 의미 있는 변경사항만 포함**합니다.
4. 본문이 필요한 경우 제목과 한 줄을 띄우고, 변경 이유나 배경을 구체적으로 작성합니다.
5. 커밋 메시지는 **한국어로 통일**합니다.

---

## 예시 (좋은 vs 나쁜 예시)

| ✅ 좋은 예시                     | ❌ 나쁜 예시    |
| -------------------------------- | --------------- |
| `feat: 로그인 기능 추가`         | `로그인 추가함` |
| `fix: 이미지 경로 오류 수정`     | `버그 고침`     |
| `docs: 설치 가이드 업데이트`     | `README 수정함` |
| `refactor: API 요청 로직 단순화` | `코드 정리`     |

---

## Cursor AI 제안 참고용 가이드라인

- AI가 생성하는 커밋 메시지는 위 표의 타입과 구조를 따릅니다.
- `header`(제목)는 100자 이내로 유지합니다.
- `type`은 반드시 포함되어야 합니다.
- 제목은 명령형으로 작성합니다.
- 본문은 선택적이며, 변경 이유를 설명하는 용도로만 사용합니다.

---

💡 **참고:**  
이 파일(`commit-convention.mdc`)을 프로젝트 루트에 두면,  
Cursor가 자동으로 해당 규칙을 인식하여 **AI 커밋 메시지를 한국어 컨벤션에 맞게 제안**합니다.
}
